<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b90"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="2"
 schemaVersion="1052"
 universal="password">
    <ThingShapes>
        <ThingShape
         aspect.isEditableExtensionObject="true"
         aspect.isExtension="true"
         className=""
         description="This ThingShape offers Bitbucket specific functionality, like checking if user and password are correct, getting the repo list and more."
         documentationContent=""
         homeMashup=""
         lastModifiedDate="2020-01-08T00:28:57.615-08:00"
         name="GitBackup.Bitbucket.ThingShape"
         projectName="GitBackup"
         tags="">
            <PropertyDefinitions>
                <PropertyDefinition
                 aspect.dataChangeType="VALUE"
                 aspect.defaultValue="https://api.bitbucket.org/2.0"
                 aspect.isPersistent="true"
                 baseType="STRING"
                 category=""
                 description=""
                 isLocalOnly="false"
                 name="BitBucketAPIRepositoryURL"
                 ordinal="2"></PropertyDefinition>
            </PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CheckIfBitbucketCredentialsAreCorrect">
                    <ResultType
                     baseType="BOOLEAN"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="Password"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="Username"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CreateCentralRepository">
                    <ResultType
                     baseType="BOOLEAN"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="Project"
                         ordinal="0"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="DoesCentralRepositoryExist">
                    <ResultType
                     baseType="BOOLEAN"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="Project"
                         ordinal="0"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="QueryRepositoryByName">
                    <ResultType
                     aspect.dataShape="QueryRepository.DataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="Password"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="RepoName"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="Username"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions></EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CheckIfBitbucketCredentialsAreCorrect">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var params = {
                                    	headers: {"Accept":"application/json"} /* JSON */,
                                    	ignoreSSLErrors: true /* BOOLEAN */,
                                    	url: "https://api.bitbucket.org/2.0/user" /* STRING */,
                                    	password: Password /* STRING */,
                                    	username: Username /* STRING */
                                    };
                                    
                                    // result: JSON
                                    var iftbl_UserInfo = Resources["ContentLoaderFunctions"].GetJSON(params);
                                    if (Object.keys(iftbl_UserInfo).length>1) result = true; else result = false;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CreateCentralRepository">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // alternative w/ bitbucket REST API v2
                                    // curl -X POST -H "Content-Type: application/json" -H "Accept: application/json" -d '{"scm": "git","is_private": true}' "https://api.bitbucket.org/2.0/repositories/mvonhasselbach/test12345"
                                    var result=false;
                                    var params = {
                                    	ignoreSSLErrors: true /* BOOLEAN */,
                                    	url: me.CentralRepositoryAPIUri+"/"+Project.toLowerCase() /* STRING */,
                                    	password: me.CentralRepositoryPassword /* STRING */,
                                    	username: me.CentralRepositoryUser /* STRING */,
                                        content: {"scm": "git", "is_private": true, "name": Project} /* JSON */
                                    };
                                    try {
                                        // result: JSON
                                        var resp = Resources["ContentLoaderFunctions"].PostJSON(params);
                                    	if(resp && resp.scm) result=true;
                                    } catch(err) {
                                    
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="DoesCentralRepositoryExist">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result=false;
                                    var params = {
                                    	ignoreSSLErrors: true /* BOOLEAN */,
                                    	url: me.CentralRepositoryAPIUri+'/'+Project.toLowerCase() /* STRING */,
                                    	password: me.CentralRepositoryPassword /* STRING */,
                                    	username: me.CentralRepositoryUser /* STRING */
                                    };
                                    try {
                                        // result: JSON
                                        var resp = Resources["ContentLoaderFunctions"].GetJSON(params);
                                    	if(resp && resp.scm) result=true;
                                    } catch(err) {
                                    
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="QueryRepositoryByName">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(RemoteRepositoryDataShape)
                                    var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName : "InfoTable",
                                    	dataShapeName : "RemoteRepositoryDataShape"
                                    });
                                    var str_Query="";
                                    if (RepoName!==undefined&&RepoName!=="") str_Query="&"+"q=name"+encodeURIComponent("~\""+RepoName+"\"");
                                    var params = {
                                    	ignoreSSLErrors: true /* BOOLEAN */,
                                    	url: me.BitBucketAPIRepositoryURL+"/repositories?role=contributor"+str_Query /* me.CentralRepositoryAPIUri */,
                                    	password: Password,
                                    	username:  Username/* me.CentralRepositoryUser */
                                    };
                                    var arr_repos = Resources["ContentLoaderFunctions"].GetJSON(params).values;
                                    
                                    try {
                                            // RemoteRepositoryDataShape entry object
                                            for (var x = 0; x < arr_repos.length; x++) {
                                                var row = arr_repos[x];
                                                var newEntry = new Object();
                                                newEntry.Type = row.scm; // STRING
                                                newEntry.Owner = row.owner.username; // STRING
                                                newEntry.FullName = row.full_name; // STRING
                                                newEntry.Name = row.name; // STRING
                                                for(var xx=0; xx<row.links.clone.length; xx++){
                                                    if(row.links.clone[xx].name=="https"){
                                                        newEntry.CloneURL = row.links.clone[xx].href; // STRING
                                                        break;
                                                    }
                                                }
                                                
                                                result.AddRow(newEntry);
                                            		
                                           
                                        }
                                    } catch(err) {
                                    logger.warn(err);
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions></Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations>
                <AlertDefinitions
                 name="BitBucketAPIRepositoryURL"></AlertDefinitions>
            </AlertConfigurations>
            <InstanceRunTimePermissions></InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
